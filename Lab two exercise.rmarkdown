---
title: "Lab 2 Exercise"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Code

```{r}
library(tidyverse)
tree_data = read.csv('tree_data.csv')


glimpse(tree_data)
#Question 1: There are 8 columns, with treeID, standId, stand, year, species, age, inc, and rad_ib. Some are numbers, some are years, some are decimals, etc.
#use cntrl alt i to make a new code chunk
```

#The dataset structure is in named headers with numerics and variables for each row. The headers for each row are: treeID, standID, stnad, year, species, age, inc, rad_iib. I see numbers, years, and species abbreviations.

```{r}
tree_data %>% summarise(n = n())
#different way to use glimpse for looking at number of rows
```

```{r}
nrow(tree_data)
#ask how many rows exist
```

```{r}
#Question 2 
tree_data %>%
  filter( standID == 1) %>%
  tally()

#use == for comparisons (if values are qual to another)
#use <- for variable assignments 
#use = for function arguments (if somethign = something)
#filter function to subset rows based on condition
#filter stand_ID == 1 shows us only when standID is 1 
```

# There are 979 trees with standID one.

```{r}
#to rename and produce in env 
tree_stand <- tree_data %>%
  filter(standID ==1)

print(tree_stand)
  
#now it exists under env tab as tree_stand ! 
#use print to see it 
```

```{r}
#question 3 

tree_data %>%
  filter(species %in% c("ABBA", "PIST")) %>%
  count(species)

# %in% whether one vector exists within another, do they actually exist in species column?
#since its asking how many are there, we use filter, then count to actually count 

#use %in% 
```

#There are 13033 records of Abies Balsamea and 4188 records of Pinus Strobus made.

```{r}
#Question 4 
#find last year of dataset 
#making an assignment, bc going to refrence in another portion of the code 
#max = finding last year, min would be finding first
#na.rm = TRUE (helps us to get the null/0/na values out of the dataset)

  
last_year <-  max(tree_data$year, na.rm = TRUE)

tree_data %>%
  filter(year == last_year, age > 200) %>%
  count()
```

#There are 7 trees older than 200 years in the dataset.

```{r}
#Question 5
tree_data %>%
  slice_max(order_by = age, n=1)
#slice_max tells us row with max age
#n=1 tells us that only the 1 max value is present 
#difference between slice max and n=1 is that slicemax will give us the top values with that, n=5, 7 the top 5 and top 7 rows 
#oldest_tree is copy of tree_data set 
```

#The oldest tree in the dataset is 269 years old.

```{r}
oldest_tree <-tree_data %>% 
  slice_max(order_by =age, n=1)

print(oldest_tree)
```

```{r}
#Question 6 
#Find the oldest 5 trees recorded in 2001. Use the help docs to understand optional parameters

tree_data %>%
  filter(year == 2001) %>%
  slice_max(order_by = age, n = 5)
 
  

```

#The 5 oldest trees are treeID 24,25,1595,1598, and 1712.They range from 206-263 years.

```{r}
# Question 7 
#Using slice_sample, how many trees are in a 30% sample of those recorded in 2002
tree_data %>% 
  filter(year == 2002)
  ?slice_sample(1:round(nrow(tree_data)* 0.30, 0))
        
# There are 2,291 trees in a 30% sample. 

```

```{r}
# Question 8: Filter all trees in stand 5 in 2007. Sort this subset by descending radius at breast height (rad_ib) and use slice_head() to get the top three trees. Report the tree IDs


tree_data %>%
  filter(standID == 5, year == 2007) %>%
  arrange(decreasing = rad_ib) %>%
  slice_head(n=3) %>%
  pull(treeID)

```

#The treeID's are 145, 122, and 126.

```{r}
# Question 9: Reduce your full data.frame to [treeID, stand, year, and radius at breast height]. Filter to only those in stand 3 with records from 2007, and use slice_min to pull the smallest three trees meaured that year.

tree_data %>%
  filter( standID == 3, year == 2007) %>%
  slice_min(order_by = rad_ib, n=3)
  select(treeID, standID, year, rad_ib) %>%
  glimpse()
```

#The treeID's of the smallest three trees are 50,56,36.

```{r}
#Question 10: Use select to remove the stand column. Use glimspe to show the dataset.
library(tidyverse)

tree_data |>
  select(-stand) |>
   glimpse()
```

#The dataset has the same columns, just not a column for stand.

```{r}
#Question 11: Look at the help document for dplyr::select and examine the “Overview of selection features”. Identify an option (there are multiple) that would help select all columns with the string “ID” in the name. Using glimpse to view the remaining dataset

tree_data %>% 
  select(contains("ID")) %>%
  glimpse()

```

#THe option I chose is contains("ID")

```{r}
#Question 13: Looking back at the data dictionary, rename rad_inc and inc to include _[unit] in the name. Unlike earlier options, be sure that this renaming is permanent, and stays with your data.frame (e.g. <-). Use glimpse to view your new data.frame.

library(dplyr)

tree_data <- tree_data %>%
  rename(rad_ib_unit = rad_ib)
```

```{r}
tree_data <- tree_data %>%
  rename(inc_unit = inc)

```

```{r}
glimpse(tree_data)
```

# inc_unit and rad_ib_unit exist when looking at the glimpse.

```{r}
#Question 14: A key measurement in forestry in “basal area column”. The metric is computed with the formula:
#BA(m2) = 0.00007854⋅DBH^2
#Where DBH is the diameter at breast height (cm). Use mutate to compute DBH in centimeters, and BA in m2 (HINT: Make sure rad_ib is in cm prior to computing the diameter!). What is the mean BA_m2 of the the species POTR in 2007?

tree_data <- tree_data %>%
  mutate(
    DBH = (rad_ib_unit / 10) * 2,
    BA_m2 = 0.00007854 * DBH^2
    ) %>%
    glimpse()
    
mean_BA_m2 <- tree_data %>% 
  filter(species == "POTR", year == 2007) %>%
  summarise(mean_BA_m2 = mean(BA_m2, na.rm = TRUE))


print(mean_BA_m2)



```

#The mean is 0.03696619 cm.

```{r}
#Question 15: Lets say for the sake of our study, trees are not established until they are 5 years of age. Use if_else to add a boolean column to our dataset called established that is TRUE if the age is greater then 5 and FALSE if less then or equal to five. Once added, use count (see ?count) to determine how many records are from estabilshed trees?
tree_data <- tree_data %>% 
  mutate(established = if_else(age > 5, TRUE, FALSE))

tree_data %>%
  count(established)
```

#There are 122503 trees that from the established record (in the TRUE column)

```{r}
#Question 16: Use mutate and case_when to add a new column to you data.frame that classifies each tree into the proper DBH_class. Once done, limit your dataset to the year 2007 and report the number of each class with count.


tree_data <- tree_data |>
  filter(year == 2007)
  mutate("DBH" = case_when(
    DBH < 10 ~ "Small",
    DBH >= 10 & DBH < 30 ~ "medium",
    DBH >= 30 ~ "Large",
    TRUE ~ NA_character_
  ))
print(count)

```

```{r}
names(tree_data)
```

```{r}
#Question 17: Compute the mean DBH (in cm) and standard deviation of DBH (in cm) for all trees in 2007. Explain the values you found and their statistical meaning.
tree_data |>
  filter(!is.na(year))
  filter(year %>% 2007) |>
  summarize(
    mean_DBH = mean(DBH, na.rm = TRUE),
    sd_DBH = sd(DBH, na.rm = TRUE)
  )

```

#This means that the average tree diameter breast height is 16.09cm. The deviation from the mean is 6.14 cm, meaning that there is decent variation within tree DBH sizes. These might help to see the growth of trees since 2007, in relation to the DBH which is a standard measuring tool for tree growth.

```{r}
library(tidyverse)
tree_data = read.csv('tree_data.csv')


glimpse(tree_data)
```

```{r}
#Question 18: Compute the per species mean tree age using only those ages recorded in 2003. Identify the three species with the oldest mean age.

tree_data %>%
  filter(as.numeric(year) == 2003) %>%
  group_by(species) %>%
  summarise(mean_age = mean(age, na.rm = TRUE)) %>%
  arrange(desc(mean_age)) %>%
  slice_head(n = 3)

#The mean tree age is 

```

#The species with the oldest mean age are Thuja occidentalis,Fraxinus nigra, and Pinus strobus.

```{r}
#Question 19: In a single summarize call, find the number of unique years with records in the data set along with the first and last year recorded?
summary_year <- tree_data |>
  summarise(
    unique_years = n_distinct(year),
    first_year = min(year),
    last_year = max(year)
  )
  print(summary_year)

```

#There are 111 unique years recorded. The first year recorded is 1897, and the last year recorded is 2007.

```{r}
#Question 20: Determine the stands with the largest number of unique years recorded. Report all stands with largest (or tied with the largest) temporal record.


tree_data = read.csv('tree_data.csv')

tree_data <- tree_data %>%
  group_by(standID) %>%
  summarise(unique_years = n_distinct(as.numeric(year))) %>%
  ungroup() %>%
  mutate(max_years = max(unique_years)) %>%  
  filter(unique_years == max_years) 

glimpse(tree_data)

```

#The stands with the largest number of unique years recorded is 1,15,16,17,24.

```{r}
#FINAL QUESTION
library(dplyr)
tree_data = read.csv('tree_data.csv')

tree_data_filtered <- tree_data %>%
  group_by(treeID) %>%
  filter(n() >= 10)


tree_data_growth <- tree_data_filtered %>%
  arrange(treeID, year) %>%
  group_by(treeID) %>%
  mutate(growth = rad_ib - lag(rad_ib))

tree_data_totalgrowth <- tree_data_growth %>%
  group_by(treeID) %>%
  summarise(totalgrowth = sum(growth, na.rm = TRUE))

tree_data_merged <- tree_data_filtered %>%
  left_join(tree_data_totalgrowth, by = "treeID")

tree_data_averagegrowth <- tree_data_merged %>%
  group_by(species) %>%
  summarise(tree_data_averagegrowth = mean(tree_data_growth, na.rm = TRUE))

tree_data_fastestgrowth <- tree_data_averagegrowth %>%
  arrange(desc(tree_data_averagegrowth)) %>%
  head(3)

tree_data_slowestgrowth <- tree_data_averagegrowth %>%
  arrange(tree_data_averagegrowth) %>%
  head(3)


print("Fastest Growing Species")
print(tree_data_fastestgrowth)

print("Slowest Growing Species")
print(tree_data_slowestgrowth)  
```
